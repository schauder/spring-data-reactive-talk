= Going Reactive With Spring Data
:revealjs_customtheme: reveal.js/css/theme/schauderhaft.css
:icons: font
:twitter-tag: @jensschauder
:conference-tag: @jug_DO
:talk-tag: #springdatareactive
:slide-link: http://bit.ly/sdreactive
:linkattrs:

include::footer.ad[]

== Why Reactive?

=== !

[quote, "Rossen Stoyanchev"]
____
In a nutshell, reactive programming is about non-blocking, event-driven applications that scale with a small number of threads with back pressure as a key ingredient that aims to ensure producers to not overwhelm consumers.
____

=== !

[quote, "Reactive Streams"]
____
The main goal of Reactive Streams is to govern the exchange of stream data across an asynchronous boundary — think passing elements on to another thread or thread-pool — while ensuring that the receiving side is not forced to buffer arbitrary amounts of data.
____


== Relevant Projects

=== Reactive Streams

Common interfaces and a TCK.

Allows for interoperation of various implementations

=== Implementations

RxJava

Akka

Project Reactor

+ other more specialized

=== Flow API

Semantically equivalent to Reactive Streams.

Part of the JDK.

Rules of Reactive Streams apply.

=== Which to pick?

Ask the developer of RxJava.

=== !

image::choose-reactive-lib.png[background, size=contain]

=== Spring Framework 5.0

Reactive server side web framework based on Project Reactor.

=== Spring Data - Kay Release

Reactive Persistence API for

* MongoDB
* Cassandra
* Redis

Uses Reactor by Default, but supports RxJava as well.

== Threads in Servlet Apps

image::servlet.jpg[background, size=contain]

=== 1 Thread per CPU Core

Overload -> Network based Time Out

=== With I/O

image::io.jpg[background, size=contain]

=== 1 T/Core + 1/Connection (???)

Works only with full/even load.

Assymetric Load -> Wasted Resources

Overload -> Network based Time Out

== Reactive Streams

=== The Contract

image::subscriber-publisher.jpg[background, size=contain]

=== !

image::subscriber-publisher.jpg[background, size=contain]

=== Backpressure

Publisher may only send what requested.

=== Processor

Combines Subscriber and Publisher

=== !

image::pipeline.jpg[background, size=contain]

=== Functional Processors

* map: transform events

* flatmap: many elements from one

* filter

=== Controlling Processors

* buffer _n_ elements

* stop after some time

* work on a special Thread-Pool

== Reactor

Publisher -> Mono, Flux

Processors -> methods on Mono & Flux

=== reactive Spring Data

Lets play!

== What about JDBC?

=== Nobody wants to push JPA through Reactive Streams

=== Spring Data JDBC

image::alien.jpg[background, size=contain]

https://github.com/spring-projects/spring-data-jdbc

=== Oracle Works on Async SQL-API

Not Flow/Reactive Stream based

https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=CON1491&showEnrolled=false[Java One Slides]

Mailing List: jdbc-spec-discuss@openjdk.java.net

http://hg.openjdk.java.net/jdk/sandbox/file/b49fd5dbaab6/src/java.sql/share/classes/java/sql2[repository]

=== Spring will take a look

https://jira.spring.io/browse/SPR-16069

=== The idea of a reactive JDBC template

https://gist.github.com/sdeleuze/a7348a2385a4d9a7bd727617a225ed06

=== There are APIs

Run on Thread Pools

https://github.com/mheath/adbcj[adbcj]

https://github.com/vexsoftware/ajdbc[ajdbc]

https://github.com/davidmoten/rxjava-jdbc[rxjava-jdbc]

include::self.ad[]


== The Demo Repositories

=== From this talk

https://github.com/schauder/spring-data-reactive-demo

=== From the long version of this talk

https://github.com/mp911de/reactive-vs-imperative

=== Similar to the first but better documented

better for self study

https://github.com/christophstrobl/going-reactive-with-spring-data

