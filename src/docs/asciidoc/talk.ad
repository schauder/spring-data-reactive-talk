= Going Reactive With Spring Data
:revealjs_customtheme: reveal.js/css/theme/schauderhaft.css
:icons: font
:twitter-tag: @jensschauder
:conference-tag: #wjax
:talk-tag: #springdatareactive
:slide-link: http://bit.ly/jsch-sdreactive
:linkattrs:

include::footer.ad[]

== Why Reactive?

=== !

[quote, "Rossen Stoyanchev"]
____
In a nutshell, reactive programming is about non-blocking, event-driven applications that scale with a small number of threads with back pressure as a key ingredient that aims to ensure producers to not overwhelm consumers.
____

=== !

[quote, "Reactive Streams"]
____
The main goal of Reactive Streams is to govern the exchange of stream data across an asynchronous boundary — think passing elements on to another thread or thread-pool — while ensuring that the receiving side is not forced to buffer arbitrary amounts of data.
____


== Relevant Projects

=== Reactive Streams

Common interfaces and a TCK.

Allows for interoperation of various implementations

=== Flow API

Semantically equivalent to Reactive Streams.

Part of the JDK.

Rules of Reactive Streams apply.

=== Implementations

RxJava

Akka

Project Reactor

+ other more specialized

=== !

image::choose-reactive-lib.png[background, size=contain]

=== Spring Framework 5.0

Reactive server side web framework based on Project Reactor.

=== Spring Data Kay

Reactive Persistence API for

* MongoDB
* Cassandra
* Redis

Uses Reactor by Default, but supports RxJava as well.

== Threads in Servlet Apps

=== !

image

=== 1 Thread per CPU Core

Overload -> Network based Time Out

=== !

image

=== 1 T/Core + 1/Connection (???)

Works only with full/even load.

Assymetric Load -> Wasted Resources

Overload -> Network based Time Out

== Reactive Streams

=== !

image

=== Backpressure

Publisher may only send what requested.

=== Processor

Combines Subscriber and Publisher

=== Functional Processors

* map: transform events

* flatmap: many elements from one

* filter

=== Controlling Processors

* buffer _n_ elements

* stop after some time

* work on a special Thread-Pool

== Reactor

Publisher -> Mono, Flux

Processors -> methods on Mono & Flux

== What about JDBC?

=== Nobody wants to push JPA through Reactive Streams

=== No Spring Data JDBC store

Yet

=== Oracle Works on Async SQL-API

Not Flow/Reactive Stream based

=== There are APIs

Run on Thread Pools

include::self.ad[]
